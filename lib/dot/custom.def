{{
  var $schema = it.schema[$rule.keyword]
    , $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it)
    , $ruleErrs = $ruleValidate.code + '.errors'
    , $schemaPath = it.schemaPath + '.' + $rule.keyword;
}}

{{? !$rule.definition.inline }}
  {{=$ruleErrs}} = null;
{{?}}

{{## def.callRuleValidate:
  {{? $rule.definition.inline }}
    {{? $rule.definition.statements }}
      valid{{=it.lvl}}
    {{??}}
      ({{= $ruleValidate.validate }})
    {{?}}
  {{??}}
    {{=$ruleValidate.code}}.call(self
      {{? $rule.definition.compile }}
        , {{=$data}}
      {{??}}
        , validate.schema{{=$schemaPath}}
        , {{=$data}}
        {{? $ruleValidate.validate.length > 2 }}
          , validate.schema{{=it.schemaPath}}
        {{?}}
      {{?}}
    )
  {{?}}
#}}

{{## def.extendErrors:
  {{ var $i = 'i' + $lvl; }}
  for (var {{=$i}}=0; {{=$i}}<{{=$ruleErrs}}.length; {{=$i}}++) {
    {{ var $ruleErr = 'ruleErr' + $lvl; }}
    var {{=$ruleErr}} = {{=$ruleErrs}}[{{=$i}}];
    {{=$ruleErr}}.dataPath = (dataPath || '') + {{= it.errorPath }};
    {{? it.opts.verbose }}
      {{=$ruleErr}}.schema = validate.schema{{=$schemaPath}};
      {{=$ruleErr}}.data = {{=$data}};
    {{?}}
  }
#}}

{{? $rule.definition.inline && $rule.definition.statements }}
  {{= $ruleValidate.validate }}
{{?}}

if (!{{# def.callRuleValidate }}) {
  {{? $rule.definition.inline }}
    {{# def.error:'custom' }}
  {{??}}
    if (Array.isArray({{=$ruleErrs}})) {
      {{# def.extendErrors }}
      if (vErrors === null) vErrors = {{=$ruleErrs}};
      else vErrors.concat({{=$ruleErrs}});
      errors = vErrors.length;
    } else {
      {{# def.error:'custom' }}
    }
  {{?}}
} {{? $breakOnError }} else { {{?}}
