{{## def._error:_rule:
  {{ 'istanbul ignore else'; }}
  {{? it.createErrors !== false }}
    {
      keyword: '{{=_rule}}'
      , dataPath: (dataPath || '') + {{= it.errorPath }}
      , schemaPath: "{{=$errSchemaPath}}"
      , params: {{# def._errorParams[_rule] }}
      {{? it.opts.messages !== false }}
        , message: {{# def._errorMessages[_rule] }}
      {{?}}
      {{? it.opts.verbose }}
        , schema: {{# def._errorSchemas[_rule] }}
        , parentSchema: validate.schema{{=it.schemaPath}}
        , data: {{=$data}}
      {{?}}
    }
  {{??}}
    '{{=_rule}}'
  {{?}}
#}}


{{## def.addError:_rule:
  var err = {{# def._error:_rule }};
  if (vErrors === null) vErrors = [err];
  else vErrors.push(err);
  errors++;
#}}


{{## def.error:_rule:
  {{? !it.compositeRule && $breakOnError }}
    validate.errors = [{{# def._error:_rule }}];
    return false;
  {{??}}
    {{# def.addError:_rule }}
  {{?}}
#}}


{{## def.checkError:_rule:
  if (!{{=$valid}}) {
    {{# def.error:_rule }}
  }
#}}


{{## def.resetErrors:
  errors = {{=$errs}};
  if (vErrors !== null) {
    if ({{=$errs}}) vErrors.length = {{=$errs}};
    else vErrors = null;
  }
#}}


{{## def.concatSchema:{{?$isData}}' + {{=$schemaValue}} + '{{??}}{{=$schema}}{{?}}#}}
{{## def.appendSchema:{{?$isData}}' + {{=$schemaValue}}{{??}}{{=$schema}}'{{?}}#}}
{{## def.concatSchemaEQ:{{?$isData}}' + {{=$schemaValue}} + '{{??}}{{=it.util.escapeQuotes($schema)}}{{?}}#}}

{{## def._errorMessages = {
  $ref:            "'can\\\'t resolve reference {{=it.util.escapeQuotes($schema)}}'",
  additionalItems: "'should NOT have more than {{=$schema.length}} items'",
  additionalProperties: "'should NOT have additional properties'",
  anyOf:           "'should match some schema in anyOf'",
  dependencies:    "'should have {{? $deps.length == 1 }}property {{= it.util.escapeQuotes($deps[0]) }}{{??}}properties {{= it.util.escapeQuotes($deps.join(\", \")) }}{{?}} when property {{= it.util.escapeQuotes($property) }} is present'",
  enum:            "'should be equal to one of values'",
  format:          "'should match format \"{{=it.util.escapeQuotes($schema)}}\"'",
  maximum:         "'should be {{=$opStr}} {{#def.appendSchema}}",
  minimum:         "'should be {{=$opStr}} {{#def.appendSchema}}",
  exclusiveMaximum:"'exclusiveMaximum should be boolean'",
  exclusiveMinimum:"'exclusiveMinimum should be boolean'",
  maxItems:        "'should NOT have more than {{#def.concatSchema}} items'",
  minItems:        "'should NOT have less than {{#def.concatSchema}} items'",
  maxLength:       "'should NOT be longer than {{#def.concatSchema}} characters'",
  minLength:       "'should NOT be shorter than {{#def.concatSchema}} characters'",
  maxProperties:   "'should NOT have more than {{#def.concatSchema}} properties'",
  minProperties:   "'should NOT have less than {{#def.concatSchema}} properties'",
  multipleOf:      "'should be multiple of {{#def.appendSchema}}",
  not:             "'should NOT be valid'",
  oneOf:           "'should match exactly one schema in oneOf'",
  pattern:         "'should match pattern \"{{#def.concatSchemaEQ}}\"'",
  required:        "'{{? it.opts._errorDataPathProperty }}is a required property{{??}}should have required property \\'{{=$missingProperty}}\\'{{?}}'",
  type:            "'should be {{? $isArray }}{{= $typeSchema.join(\",\") }}{{??}}{{=$typeSchema}}{{?}}'",
  uniqueItems:     "'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)'",
  custom:          "'should pass \"{{=$rule.keyword}}\" keyword validation'",
  patternGroups:   "'should NOT have {{=$moreOrLess}} than {{=$limit}} properties matching pattern \"{{=it.util.escapeQuotes($pgProperty)}}\"'",
  switch:          "'should pass \"switch\" keyword validation'"
} #}}


{{## def.schemaRefOrVal: {{?$isData}}validate.schema{{=$schemaPath}}{{??}}{{=$schema}}{{?}} #}}
{{## def.schemaRefOrQS: {{?$isData}}validate.schema{{=$schemaPath}}{{??}}{{=it.util.toQuotedString($schema)}}{{?}} #}}

{{## def._errorSchemas = {
  $ref:            "{{=it.util.toQuotedString($schema)}}",
  additionalItems: "false",
  additionalProperties: "false",
  anyOf:           "validate.schema{{=$schemaPath}}",
  dependencies:    "validate.schema{{=$schemaPath}}",
  enum:            "validate.schema{{=$schemaPath}}",
  format:          "{{=it.util.toQuotedString($schema)}}",
  maximum:         "{{#def.schemaRefOrVal}}",
  minimum:         "{{#def.schemaRefOrVal}}",
  exclusiveMaximum:"validate.schema{{=$schemaPath}}",
  exclusiveMinimum:"validate.schema{{=$schemaPath}}",
  maxItems:        "{{#def.schemaRefOrVal}}",
  minItems:        "{{#def.schemaRefOrVal}}",
  maxLength:       "{{#def.schemaRefOrVal}}",
  minLength:       "{{#def.schemaRefOrVal}}",
  maxProperties:   "{{#def.schemaRefOrVal}}",
  minProperties:   "{{#def.schemaRefOrVal}}",
  multipleOf:      "{{#def.schemaRefOrVal}}",
  not:             "validate.schema{{=$schemaPath}}",
  oneOf:           "validate.schema{{=$schemaPath}}",
  pattern:         "{{#def.schemaRefOrQS}}",
  required:        "validate.schema{{=$schemaPath}}",
  type:            "{{? $isArray }}['{{= $typeSchema.join(\"','\") }}']{{??}}'{{=$typeSchema}}'{{?}}",
  uniqueItems:     "{{=$schema}}",
  custom:          "validate.schema{{=$schemaPath}}",
  patternGroups:   "validate.schema{{=$schemaPath}}",
  switch:          "validate.schema{{=$schemaPath}}"
} #}}


{{## def.schemaValueQS: {{?$isData}}{{=$schemaValue}}{{??}}{{=it.util.toQuotedString($schema)}}{{?}} #}}

{{## def._errorParams = {
  $ref:            "{ ref: '{{=it.util.escapeQuotes($schema)}}' }",
  additionalItems: "{ limit: {{=$schema.length}} }",
  additionalProperties: "{ additionalProperty: '{{=$additionalProperty}}' }",
  anyOf:           "{}",
  dependencies:    "{ property: '{{= it.util.escapeQuotes($property) }}', missingProperty: '{{=$missingProperty}}', depsCount: {{=$deps.length}}, deps: '{{? $deps.length==1 }}{{= it.util.escapeQuotes($deps[0]) }}{{??}}{{= it.util.escapeQuotes($deps.join(\", \")) }}{{?}}' }",
  format:          "{ format: '{{=it.util.escapeQuotes($schema)}}' }",
  maximum:         "{ comparison: {{=$opExpr}}, limit: {{=$schemaValue}}, exclusive: {{=$exclusive}} }",
  minimum:         "{ comparison: {{=$opExpr}}, limit: {{=$schemaValue}}, exclusive: {{=$exclusive}} }",
  exclusiveMaximum:"{}",
  exclusiveMinimum:"{}",
  maxItems:        "{ limit: {{=$schemaValue}} }",
  minItems:        "{ limit: {{=$schemaValue}} }",
  maxLength:       "{ limit: {{=$schemaValue}} }",
  minLength:       "{ limit: {{=$schemaValue}} }",
  maxProperties:   "{ limit: {{=$schemaValue}} }",
  minProperties:   "{ limit: {{=$schemaValue}} }",
  multipleOf:      "{ multipleOf: {{=$schemaValue}} }",
  not:             "{}",
  oneOf:           "{}",
  pattern:         "{ pattern: {{#def.schemaValueQS}} }",
  required:        "{ missingProperty: '{{=$missingProperty}}' }",
  type:            "{ type: '{{? $isArray }}{{= $typeSchema.join(\",\") }}{{??}}{{=$typeSchema}}{{?}}' }",
  uniqueItems:     "{ i: i, j: j }",
  custom:          "{ keyword: '{{=$rule.keyword}}' }",
  patternGroups:   "{ reason: '{{=$reason}}', limit: {{=$limit}}, pattern: '{{=it.util.escapeQuotes($pgProperty)}}' }",
  switch:          "{ caseIndex: {{=$caseIndex}} }"
} #}}
